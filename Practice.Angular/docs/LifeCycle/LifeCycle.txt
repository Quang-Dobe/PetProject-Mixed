1. ngOnInit
- The ngOnInit method runs after Angular has initialized all the components inputs with their initial values. A component's ngOnInit runs exactly once.
- This step happens before the component's own template is initialized. This means that you can update the component's state based on its initial input values.

2. ngOnChanges
- The ngOnChanges method runs after any component inputs have changed.
- This step happens before the component's own template is checked. This means that you can update the component's state based on its initial input values.
- During initialization, the first ngOnChanges runs before ngOnInit.
- The ngOnChanges method accepts one SimpleChanges argument. This object is a Record mapping each component input name to a SimpleChange object. 
  Each SimpleChange contains the input's previous value, its current value, and a flag for whether this is the first time the input has changed.
- If you provide an alias for any input properties, the SimpleChanges Record still uses the TypeScript property name as a key, rather than the alias.

3. ngOnDestroy
- The ngOnDestroy method runs once just before a component is destroyed. 
  Angular destroys a component when it is no longer shown on the page, such as being hidden by @if or upon navigating to another page

4. ngDoCheck
- The ngDoCheck method runs before every time Angular checks a component's template for changes.
- You can use this lifecycle hook to manually check for state changes outside of Angular's normal change detection, manually updating the component's state.
- This method runs very frequently and can significantly impact your page's performance. Avoid defining this hook whenever possible, 
  only using it when you have no alternative.
- During initialization, the first ngDoCheck runs after ngOnInit.

5. ngAfterContentInit
- The ngAfterContentInit method runs once after all the children nested inside the component (its content) have been initialized.

6. ngAfterContentChecked
- The ngAfterContentChecked method runs every time the children nested inside the component (its content) have been checked for changes.
- This method runs very frequently and can significantly impact your page's performance. 
  Avoid defining this hook whenever possible, only using it when you have no alternative.

7. ngAfterViewInit
- The ngAfterViewInit method runs once after all the children in the component's template (its view) have been initialized.

8. ngAfterViewChecked
- The ngAfterViewChecked method runs every time the children in the component's template (its view) have been checked for changes.
- This method runs very frequently and can significantly impact your page's performance. 
  Avoid defining this hook whenever possible, only using it when you have no alternative.

9. afterRender and afterNextRender
- The afterRender and afterNextRender functions let you register a render callback to be invoked 
  after Angular has finished rendering all components on the page into the DOM.
- These functions are different from the other lifecycle hooks described in this guide. 
  Rather than a class method, they are standalone functions that accept a callback. 
  The execution of render callbacks are not tied to any specific component instance, but instead an application-wide hook.
- afterRender and afterNextRender must be called in an injection context, typically a component's constructor.
- Render callbacks do not run during server-side rendering or during build-time pre-rendering.
